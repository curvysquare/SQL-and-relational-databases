SCHEMA:

Movie ( mID, title, year, director )  English: There is a movie with ID number mID, a title, a release year, and a director.   Reviewer ( rID, name )  English: The reviewer with ID number rID has a certain name.   Rating ( rID, mID, stars, ratingDate )  English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 
EXERCISES: 

Q1
Find the names of all reviewers who rated Gone with the Wind
SELECT name
FROM Reviewer 
Where Reviewer.rID in
(SELECT DISTINCT rID
FROM Rating
where Rating.mID in 
(SELECT mID
FROM Movie
WHERE title = 'Gone with the Wind'))

Q2.
For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.
SELECT name, title, stars
From Reviewer inner join Rating using(rID) inner join Movie using(mID)
WHERE name = director

Q3
Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".)

SELECT NAME
FROM Reviewer
UNION
SELECT Title
FROM Movie
ORDER BY title, name

Q4
Find the titles of all movies not reviewed by Chris Jackson.
SELECT Title
FROM Movie 
Where Title not in (SELECT Title
From Movie inner join Rating using(mID) inner join Reviewer using(rID)
where name = 'Chris Jackson')

Q5
For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order
Select DISTINCT re1.name, re2.name
FROM rating ra1, rating ra2, reviewer re1, reviewer re2
Where ra1.mID = ra2.mID
and re1.name < re2.name
and ra1.rID = re1.rID 
and ra2.rID = re2.rID 
Order by re1.name, re2.name

Q6
For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.
SELECT name, title, stars
FROM Rating 
inner JOIN Reviewer using(rID) inner join Movie using(mID)
where stars = (select min(stars)from Rating)

Q7
List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.

SELECT title, avg(stars) as AVG
From Movie
inner join rating using (mID)
GROUP BY mID
ORDER BY AVG desc, title

Q8
Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.
SELECT name
FROM Reviewer
INNER JOIN Rating USING(rId)
GROUP BY rId
HAVING COUNT(*)>=3

Q9

Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.
Select title, director 
From Movie
Where director in (SELECT Director
From Movie 
Group by Director 
HAVING COUNT(*)>1)
ORDER by director, title


Q10

Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)
Select title, max(AVG_STARS)
FROM(SELECT AVG(stars) as AVG_STARS, title 
FROM Movie 
inner join Rating using(mID)
Group by mID)

Q11

Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.)
SELECT title, AVG_STARS
FROM(SELECT AVG(stars) as AVG_STARS, title
FROM Movie 
inner join Rating using(mID)
Group by mID)
WHERE AVG_STARS = (SELECT min(AVG_STARS)
FROM(SELECT AVG(stars) as AVG_STARS, title
FROM Movie 
inner join Rating using(mID)
Group by mID))

Q12

For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL
select director, title, stars
from Movie inner join Rating using(mID)
where director <> ''
group by director
having stars = max(stars)



